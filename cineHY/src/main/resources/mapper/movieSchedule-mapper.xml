<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="movieScheduleMapper">

<select id="getTheaterList" resultType="theater">

	SELECT
		   THEATER_CODE theaterCode,
		   THEATER_NAME theaterName,
		   THEATER_ADDR theaterAddr,
		   LOCATION_X locationX,
		   LOCATION_Y locationY
	  FROM
	  	   TB_THEATER
	 
</select>

<select id="getScheduleList" resultType="movieSchedule" parameterType="hashmap">
	
	SELECT
		   SCREENING_ID screeningId,
		   SCREEN_CODE screenCode,
		   STARTTIME startTime,
		   ENDTIME endTime,
		   STARTDATE startDate, 
		   ENDDATE endDate,
		   MOVIE_CODE movieCode,
		   THEATER_CODE theaterCode
	  FROM
	  	   TB_MOVIE_SCHEDULE
	 WHERE
	       MOVIE_CODE = #{movieCode}
	   AND THEATER_CODE = #{theaterCode}
	   AND (
	        (#{startDate} BETWEEN STARTDATE AND ENDDATE)
            OR (#{endDate} BETWEEN STARTDATE AND ENDDATE)
            OR (STARTDATE BETWEEN #{startDate} AND #{endDate})
            OR (ENDDATE BETWEEN #{startDate} AND #{endDate})
		   )
	 ORDER 
        BY
	        STARTTIME ASC
   	 
</select>

	
<select id="allScheduleListByDate" resultType="movieScheduleVO" parameterType="hashmap">
    SELECT
	        MS.SCREENING_ID screeningId,
	        MS.SCREEN_CODE screenCode,
	        MS.STARTTIME startTime,
	        MS.ENDTIME endTime, 
	        MS.STARTDATE startDate,
	        MS.ENDDATE endDate,
	        MS.MOVIE_CODE movieCode,
	        MS.THEATER_CODE theaterCode,
	        M.MOVIE_TITLE movieTitle, 
	        M.RATING rating
     FROM
	        TB_MOVIE_SCHEDULE MS
	        INNER JOIN TB_MOVIE M ON MS.MOVIE_CODE = M.MOVIE_CODE
    WHERE
	        MS.THEATER_CODE = #{theaterCode} 
	        AND #{date} BETWEEN MS.STARTDATE AND MS.ENDDATE 
    ORDER 
       BY
	        MS.STARTTIME ASC
</select>	   

<select id="checkSchedule" resultType="int">
    SELECT 
        COUNT(*) AS schedule_count
    FROM 
        TB_MOVIE_SCHEDULE MS
    JOIN 
        TB_SCREEN S ON MS.SCREEN_CODE = S.SCREEN_CODE
    JOIN 
        TB_THEATER T ON MS.THEATER_CODE = T.THEATER_CODE
    WHERE 
        T.THEATER_CODE = #{theaterCode}
        AND MS.SCREEN_CODE = #{screenCode}
        AND (
            (#{startDate} &lt; MS.ENDDATE AND #{endDate} &gt; MS.STARTDATE) OR
            (#{startDate} = MS.STARTDATE AND #{startTime} &lt; MS.ENDTIME) OR
            (#{endDate} = MS.ENDDATE AND #{endTime} &gt; MS.STARTTIME) OR
            (MS.STARTDATE BETWEEN #{startDate} AND #{endDate}) OR
            (MS.ENDDATE BETWEEN #{startDate} AND #{endDate})
        )
        <if test="startTime != null and endTime != null">
            AND NOT (
                (#{startTime} &gt;= MS.ENDTIME OR #{endTime} &lt;= MS.STARTTIME)
            )
        </if>
</select>

<insert id="insert" parameterType="movieSchedule" >

	INSERT INTO
				TB_MOVIE_SCHEDULE
	     VALUES
	     		(
	     		SEQ_MOVIE_SCHEDULE.NEXTVAL,
				#{screenCode},
				#{theaterCode},
				#{startTime},
				#{endTime},
				#{startDate},
				#{endDate},
				#{movieCode}		
	     		)

</insert>

<delete id="delete" parameterType="_int">
	DELETE
		   TB_MOVIE_SCHEDULE
	 WHERE
	 	   SCREENING_ID = #{screeningId}

</delete>

<select id="getReservationRate" resultType="double">
	 WITH 
	 			MOVIE_SCHEDULE AS 
	 			(
            	SELECT 
                			MS.MOVIE_CODE,
                			MS.SCREEN_CODE
            	  FROM 
            				TB_MOVIE_SCHEDULE MS
        		),
        		RESERVED_SEATS AS 
        		(
            	SELECT 
                			MS.MOVIE_CODE,
                			COUNT(*) AS RESERVED_SEATS
            	  FROM 
            				TB_SEAT S
            	   JOIN 
            	   			TB_MOVIE_SCHEDULE MS 
            	   	 ON 
            	   	 		S.SCREENING_ID = MS.SCREENING_ID
            	GROUP 
            		  BY 
            		  		MS.MOVIE_CODE
        		),
        		TOTAL_SEATS AS 
        		(
            	SELECT 
                			MS.MOVIE_CODE,
                			SUM(SC.SEAT) AS TOTAL_SEATS
            	  FROM 
            	  			MOVIE_SCHEDULE MS
            	   JOIN 
            	   			TB_SCREEN SC 
            	   	 ON 
            	   	 		MS.SCREEN_CODE = SC.SCREEN_CODE
            	GROUP 
            		  BY 
            		  		MS.MOVIE_CODE
        		)
	SELECT 
       CASE 
      WHEN 
      			TS.TOTAL_SEATS > 0 
       THEN 
            	(RS.RESERVED_SEATS / TS.TOTAL_SEATS) * 100
        ELSE 
            	0
    	 END 
    	 		AS RESERVATION_RATE
	   FROM 
	   			(
	   			   SELECT 
	   			DISTINCT 
	   							MOVIE_CODE 
	   				 FROM 
	   				 			TB_MOVIE_SCHEDULE
	   			) MS
 LEFT JOIN 
 				RESERVED_SEATS RS 
 		   ON 
 		   		MS.MOVIE_CODE = RS.MOVIE_CODE
LEFT JOIN 
				TOTAL_SEATS TS 
		  ON 
		  		MS.MOVIE_CODE = TS.MOVIE_CODE
	WHERE 
				MS.MOVIE_CODE = #{movieCode}
	ORDER 
		  BY 
		  		MS.MOVIE_CODE
</select>
	

</mapper>